
name: CI/CD

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}
  FRONTEND_IMAGE_NAME: 5g00ev16-3004/demo-lesson-frontend
  BACKEND_IMAGE_NAME: 5g00ev16-3004/demo-lesson-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Install Node 20
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "20"

      # Use PostgreSQL service in GitHub Actions
      - name: Start PostgreSQL
        run: |
          sudo systemctl start postgresql
          sudo systemctl enable postgresql

      # Set up PostgreSQL
      - name: Setup PostgreSQL
        run: |
          sudo -u postgres psql -c "SELECT version();"
          sudo -u postgres psql -c "CREATE DATABASE test_db;"
          sudo -u postgres psql -c "CREATE USER root WITH PASSWORD 'password';"
          sudo -u postgres psql -c "ALTER ROLE root SUPERUSER;"
          sudo -u postgres psql -c "\l" # List databases

      # Seed the database
      - name: Seed Database
        working-directory: ./db
        run: PGPASSWORD=password psql -h localhost -U root -d test_db -f init.sql

      - name: Create backend testing env file
        run: |
          echo "${{ secrets.ENV_FILE_TEST }}" > ./backend/.env

      - name: Install the backend dependencies
        working-directory: ./backend
        run: npm install    
      
      - name: Build backend code 
        working-directory: ./backend
        run: npm run build

      - name: Run the backend tests 
        working-directory: ./backend
        run: npm run test
      
      # Install frontend dependecies
      - name: Install the Node modules
        working-directory: ./frontend
        run: npm install

      # Run frontend tests
      # - name: testing-library tests
      #  working-directory: ./frontend
      #  run: npm run test:ci

  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME}}"

      - name: Copy production env to frontend folder
        working-directory: ./frontend
        run: echo "${{ secrets.ENV_FILE_PROD }}" > .env

      - name: Build the Frontend Image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}"

  deploy:
    name: deploy
    needs: build

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Fetch the code using the checkout action
      - name: Fetch Code
        uses: actions/checkout@v4.2.2
      
      # Install OpenVPN to be able to connect to the VM server
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt --assume-yes --no-install-recommends install openvpn openvpn-systemd-resolved
      
      # Create OpenVPN configuration files
      - name: Setup VPN config
        run: |
          echo "${{ secrets.VPN_PASSWORD }}" > secret.txt
          echo "${{ secrets.VPN_CONFIG }}" > config.ovpn

      # Start the VPN connection
      - name: Connect VPN
        run: sudo openvpn --config config.ovpn --daemon --log vpn.log

      # Helper command to make sure the VPN connection is up before continueing
      - name: Wait for a VPN connection
        timeout-minutes: 1
        run: until ping -c1 ${{ secrets.REMOTE_SERVER }}; do sleep 10; done

      # Steps needed for getting SSH to connect
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEPLOY_KEY_PRIVATE }}" | base64 -d > ~/.ssh/id_rsa 
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_SERVER }} >> ~/.ssh/known_hosts

      # Install rsync
      - name: Install rsync
        run: sudo apt --assume-yes --no-install-recommends install rsync
          
      # Create stack config and sync to the VM server
      - name: Create and sync stack configuration
        run: |
          mkdir -p demo_project_stack
          cp docker-compose.server.yml demo_project_stack/docker-compose.yml
          mkdir -p demo_project_stack/db
          cp db/init.prod.sql demo_project_stack/db
          echo "${{ secrets.ENV_FILE_PROD }}" > demo_project_stack/.env
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}" >> demo_project_stack/.env
          echo "FRONTEND_IMAGE=${{ env.REGISTRY}}/${{ env.FRONTEND_IMAGE_NAME }}" >> demo_project_stack/.env
          rsync -r demo_project_stack "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}:./"

      # SSH into VM server and bring up the stack
      - name: Start containers via SSH
        run:
          ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }} 
          "
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }};
          cd demo_project_stack;
          docker compose pull;
          docker compose up -d;
          "

      - name: Kill VPN connection
        if: always()
        run: |
          sudo chmod 777 vpn.log
          sudo killall openvpn

      - name: Upload VPN logs
        uses: actions/upload-artifact@v4.6.0
        if: always()
        with:
          name: VPN logs
          path: vpn.log

